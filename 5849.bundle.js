/*! For license information please see 5849.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunklogs=self.webpackChunklogs||[]).push([[5849],{25849:(e,s,o)=>{o.r(s),o.d(s,{conf:()=>n,language:()=>l});var n={brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}]},l={defaultToken:"",tokenPostfix:".dockerfile",variable:/\${?[\w]+}?/,tokenizer:{root:[{include:"@whitespace"},{include:"@comment"},[/(ONBUILD)(\s+)/,["keyword",""]],[/(ENV)(\s+)([\w]+)/,["keyword","",{token:"variable",next:"@arguments"}]],[/(FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT)/,{token:"keyword",next:"@arguments"}]],arguments:[{include:"@whitespace"},{include:"@strings"},[/(@variable)/,{cases:{"@eos":{token:"variable",next:"@popall"},"@default":"variable"}}],[/\\/,{cases:{"@eos":"","@default":""}}],[/./,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],whitespace:[[/\s+/,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],comment:[[/(^#.*$)/,"comment","@popall"]],strings:[[/\\'$/,"","@popall"],[/\\'/,""],[/'$/,"string","@popall"],[/'/,"string","@stringBody"],[/"$/,"string","@popall"],[/"/,"string","@dblStringBody"]],stringBody:[[/[^\\\$']/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/'$/,"string","@popall"],[/'/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]],dblStringBody:[[/[^\\\$"]/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/"$/,"string","@popall"],[/"/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg0OS5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijt1SUFRQSxJQUFJQSxFQUFPLENBQ1RDLFNBQVUsQ0FDUixDQUFDLElBQUssS0FDTixDQUFDLElBQUssS0FDTixDQUFDLElBQUssTUFFUkMsaUJBQWtCLENBQ2hCLENBQUVDLEtBQU0sSUFBS0MsTUFBTyxLQUNwQixDQUFFRCxLQUFNLElBQUtDLE1BQU8sS0FDcEIsQ0FBRUQsS0FBTSxJQUFLQyxNQUFPLEtBQ3BCLENBQUVELEtBQU0sSUFBS0MsTUFBTyxLQUNwQixDQUFFRCxLQUFNLElBQUtDLE1BQU8sTUFFdEJDLGlCQUFrQixDQUNoQixDQUFFRixLQUFNLElBQUtDLE1BQU8sS0FDcEIsQ0FBRUQsS0FBTSxJQUFLQyxNQUFPLEtBQ3BCLENBQUVELEtBQU0sSUFBS0MsTUFBTyxLQUNwQixDQUFFRCxLQUFNLElBQUtDLE1BQU8sS0FDcEIsQ0FBRUQsS0FBTSxJQUFLQyxNQUFPLE9BR3BCRSxFQUFXLENBQ2JDLGFBQWMsR0FDZEMsYUFBYyxjQUNkQyxTQUFVLGNBQ1ZDLFVBQVcsQ0FDVEMsS0FBTSxDQUNKLENBQUVDLFFBQVMsZUFDWCxDQUFFQSxRQUFTLFlBQ1gsQ0FBQyxpQkFBa0IsQ0FBQyxVQUFXLEtBQy9CLENBQUMsb0JBQXFCLENBQUMsVUFBVyxHQUFJLENBQUVDLE1BQU8sV0FBWUMsS0FBTSxnQkFDakUsQ0FDRSxzSEFDQSxDQUFFRCxNQUFPLFVBQVdDLEtBQU0sZ0JBRzlCQyxVQUFXLENBQ1QsQ0FBRUgsUUFBUyxlQUNYLENBQUVBLFFBQVMsWUFDWCxDQUNFLGNBQ0EsQ0FDRUksTUFBTyxDQUNMLE9BQVEsQ0FBRUgsTUFBTyxXQUFZQyxLQUFNLFdBQ25DLFdBQVksY0FJbEIsQ0FDRSxLQUNBLENBQ0VFLE1BQU8sQ0FDTCxPQUFRLEdBQ1IsV0FBWSxNQUlsQixDQUNFLElBQ0EsQ0FDRUEsTUFBTyxDQUNMLE9BQVEsQ0FBRUgsTUFBTyxHQUFJQyxLQUFNLFdBQzNCLFdBQVksT0FLcEJHLFdBQVksQ0FDVixDQUNFLE1BQ0EsQ0FDRUQsTUFBTyxDQUNMLE9BQVEsQ0FBRUgsTUFBTyxHQUFJQyxLQUFNLFdBQzNCLFdBQVksT0FLcEJJLFFBQVMsQ0FBQyxDQUFDLFVBQVcsVUFBVyxZQUNqQ0MsUUFBUyxDQUNQLENBQUMsT0FBUSxHQUFJLFdBQ2IsQ0FBQyxNQUFPLElBQ1IsQ0FBQyxLQUFNLFNBQVUsV0FDakIsQ0FBQyxJQUFLLFNBQVUsZUFDaEIsQ0FBQyxLQUFNLFNBQVUsV0FDakIsQ0FBQyxJQUFLLFNBQVUsbUJBRWxCQyxXQUFZLENBQ1YsQ0FDRSxXQUNBLENBQ0VKLE1BQU8sQ0FDTCxPQUFRLENBQUVILE1BQU8sU0FBVUMsS0FBTSxXQUNqQyxXQUFZLFlBSWxCLENBQUMsTUFBTyxpQkFDUixDQUFDLEtBQU0sU0FBVSxXQUNqQixDQUFDLElBQUssU0FBVSxRQUNoQixDQUFDLGNBQWUsWUFDaEIsQ0FBQyxNQUFPLFVBQ1IsQ0FBQyxJQUFLLFNBQVUsWUFFbEJPLGNBQWUsQ0FDYixDQUNFLFdBQ0EsQ0FDRUwsTUFBTyxDQUNMLE9BQVEsQ0FBRUgsTUFBTyxTQUFVQyxLQUFNLFdBQ2pDLFdBQVksWUFJbEIsQ0FBQyxNQUFPLGlCQUNSLENBQUMsS0FBTSxTQUFVLFdBQ2pCLENBQUMsSUFBSyxTQUFVLFFBQ2hCLENBQUMsY0FBZSxZQUNoQixDQUFDLE1BQU8sVUFDUixDQUFDLElBQUssU0FBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2xvZ3MvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL2RvY2tlcmZpbGUvZG9ja2VyZmlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBWZXJzaW9uOiAwLjMzLjAoNGIxYWJhZDQyN2U1OGRiZWRjMTIxNWQ5OWEwOTAyZmZjODg1ZmNkNClcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9tb25hY28tZWRpdG9yL2Jsb2IvbWFpbi9MSUNFTlNFLnR4dFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8vIHNyYy9iYXNpYy1sYW5ndWFnZXMvZG9ja2VyZmlsZS9kb2NrZXJmaWxlLnRzXG52YXIgY29uZiA9IHtcbiAgYnJhY2tldHM6IFtcbiAgICBbXCJ7XCIsIFwifVwiXSxcbiAgICBbXCJbXCIsIFwiXVwiXSxcbiAgICBbXCIoXCIsIFwiKVwiXVxuICBdLFxuICBhdXRvQ2xvc2luZ1BhaXJzOiBbXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiIH0sXG4gICAgeyBvcGVuOiBcIltcIiwgY2xvc2U6IFwiXVwiIH0sXG4gICAgeyBvcGVuOiBcIihcIiwgY2xvc2U6IFwiKVwiIH0sXG4gICAgeyBvcGVuOiAnXCInLCBjbG9zZTogJ1wiJyB9LFxuICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9XG4gIF0sXG4gIHN1cnJvdW5kaW5nUGFpcnM6IFtcbiAgICB7IG9wZW46IFwie1wiLCBjbG9zZTogXCJ9XCIgfSxcbiAgICB7IG9wZW46IFwiW1wiLCBjbG9zZTogXCJdXCIgfSxcbiAgICB7IG9wZW46IFwiKFwiLCBjbG9zZTogXCIpXCIgfSxcbiAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXG4gICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiIH1cbiAgXVxufTtcbnZhciBsYW5ndWFnZSA9IHtcbiAgZGVmYXVsdFRva2VuOiBcIlwiLFxuICB0b2tlblBvc3RmaXg6IFwiLmRvY2tlcmZpbGVcIixcbiAgdmFyaWFibGU6IC9cXCR7P1tcXHddK30/LyxcbiAgdG9rZW5pemVyOiB7XG4gICAgcm9vdDogW1xuICAgICAgeyBpbmNsdWRlOiBcIkB3aGl0ZXNwYWNlXCIgfSxcbiAgICAgIHsgaW5jbHVkZTogXCJAY29tbWVudFwiIH0sXG4gICAgICBbLyhPTkJVSUxEKShcXHMrKS8sIFtcImtleXdvcmRcIiwgXCJcIl1dLFxuICAgICAgWy8oRU5WKShcXHMrKShbXFx3XSspLywgW1wia2V5d29yZFwiLCBcIlwiLCB7IHRva2VuOiBcInZhcmlhYmxlXCIsIG5leHQ6IFwiQGFyZ3VtZW50c1wiIH1dXSxcbiAgICAgIFtcbiAgICAgICAgLyhGUk9NfE1BSU5UQUlORVJ8UlVOfEVYUE9TRXxFTlZ8QUREfEFSR3xWT0xVTUV8TEFCRUx8VVNFUnxXT1JLRElSfENPUFl8Q01EfFNUT1BTSUdOQUx8U0hFTEx8SEVBTFRIQ0hFQ0t8RU5UUllQT0lOVCkvLFxuICAgICAgICB7IHRva2VuOiBcImtleXdvcmRcIiwgbmV4dDogXCJAYXJndW1lbnRzXCIgfVxuICAgICAgXVxuICAgIF0sXG4gICAgYXJndW1lbnRzOiBbXG4gICAgICB7IGluY2x1ZGU6IFwiQHdoaXRlc3BhY2VcIiB9LFxuICAgICAgeyBpbmNsdWRlOiBcIkBzdHJpbmdzXCIgfSxcbiAgICAgIFtcbiAgICAgICAgLyhAdmFyaWFibGUpLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBlb3NcIjogeyB0b2tlbjogXCJ2YXJpYWJsZVwiLCBuZXh0OiBcIkBwb3BhbGxcIiB9LFxuICAgICAgICAgICAgXCJAZGVmYXVsdFwiOiBcInZhcmlhYmxlXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIC9cXFxcLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBlb3NcIjogXCJcIixcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgLy4vLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQGVvc1wiOiB7IHRva2VuOiBcIlwiLCBuZXh0OiBcIkBwb3BhbGxcIiB9LFxuICAgICAgICAgICAgXCJAZGVmYXVsdFwiOiBcIlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgXSxcbiAgICB3aGl0ZXNwYWNlOiBbXG4gICAgICBbXG4gICAgICAgIC9cXHMrLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBlb3NcIjogeyB0b2tlbjogXCJcIiwgbmV4dDogXCJAcG9wYWxsXCIgfSxcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIF0sXG4gICAgY29tbWVudDogW1svKF4jLiokKS8sIFwiY29tbWVudFwiLCBcIkBwb3BhbGxcIl1dLFxuICAgIHN0cmluZ3M6IFtcbiAgICAgIFsvXFxcXCckLywgXCJcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9cXFxcJy8sIFwiXCJdLFxuICAgICAgWy8nJC8sIFwic3RyaW5nXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvJy8sIFwic3RyaW5nXCIsIFwiQHN0cmluZ0JvZHlcIl0sXG4gICAgICBbL1wiJC8sIFwic3RyaW5nXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvXCIvLCBcInN0cmluZ1wiLCBcIkBkYmxTdHJpbmdCb2R5XCJdXG4gICAgXSxcbiAgICBzdHJpbmdCb2R5OiBbXG4gICAgICBbXG4gICAgICAgIC9bXlxcXFxcXCQnXS8sXG4gICAgICAgIHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAZW9zXCI6IHsgdG9rZW46IFwic3RyaW5nXCIsIG5leHQ6IFwiQHBvcGFsbFwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBbL1xcXFwuLywgXCJzdHJpbmcuZXNjYXBlXCJdLFxuICAgICAgWy8nJC8sIFwic3RyaW5nXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvJy8sIFwic3RyaW5nXCIsIFwiQHBvcFwiXSxcbiAgICAgIFsvKEB2YXJpYWJsZSkvLCBcInZhcmlhYmxlXCJdLFxuICAgICAgWy9cXFxcJC8sIFwic3RyaW5nXCJdLFxuICAgICAgWy8kLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdXG4gICAgXSxcbiAgICBkYmxTdHJpbmdCb2R5OiBbXG4gICAgICBbXG4gICAgICAgIC9bXlxcXFxcXCRcIl0vLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQGVvc1wiOiB7IHRva2VuOiBcInN0cmluZ1wiLCBuZXh0OiBcIkBwb3BhbGxcIiB9LFxuICAgICAgICAgICAgXCJAZGVmYXVsdFwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgWy9cXFxcLi8sIFwic3RyaW5nLmVzY2FwZVwiXSxcbiAgICAgIFsvXCIkLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9cIi8sIFwic3RyaW5nXCIsIFwiQHBvcFwiXSxcbiAgICAgIFsvKEB2YXJpYWJsZSkvLCBcInZhcmlhYmxlXCJdLFxuICAgICAgWy9cXFxcJC8sIFwic3RyaW5nXCJdLFxuICAgICAgWy8kLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdXG4gICAgXVxuICB9XG59O1xuZXhwb3J0IHtcbiAgY29uZixcbiAgbGFuZ3VhZ2Vcbn07XG4iXSwibmFtZXMiOlsiY29uZiIsImJyYWNrZXRzIiwiYXV0b0Nsb3NpbmdQYWlycyIsIm9wZW4iLCJjbG9zZSIsInN1cnJvdW5kaW5nUGFpcnMiLCJsYW5ndWFnZSIsImRlZmF1bHRUb2tlbiIsInRva2VuUG9zdGZpeCIsInZhcmlhYmxlIiwidG9rZW5pemVyIiwicm9vdCIsImluY2x1ZGUiLCJ0b2tlbiIsIm5leHQiLCJhcmd1bWVudHMiLCJjYXNlcyIsIndoaXRlc3BhY2UiLCJjb21tZW50Iiwic3RyaW5ncyIsInN0cmluZ0JvZHkiLCJkYmxTdHJpbmdCb2R5Il0sInNvdXJjZVJvb3QiOiIifQ==